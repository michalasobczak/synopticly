<!--
  <span style="font-size:70px;">Welcome, to the <strong>synopticly</strong>!</span>
  <br /><br />
  <span style="font-size:70px;">Current time: <%= Time.now.to_s %></span><br />
  <span style="font-size:50px;">Objects: <%= Application.distinct.select(:app_name).size.to_s %></span>
  <br /><br />
-->

<svg id="graphContainer">
  <g/>
</svg>

<textarea id="dot" style="width:800px;height:400px;display:none;">
digraph {
<% Application.where("app_name <> 'n/a' AND app_name is not null").each do |app| %>
  <% if !app.app_name.blank? then %>
    <% 
      #
      # entries counter
      sub_entries = Entry
                     .where("app_name = ? 
                             AND hostname IS NOT NULL 
                             AND created_at >= now()-interval '15 seconds'", app.app_name)
                     .group(:hostname)
                     .select(:hostname)
                     .pluck(:hostname)
      # last known entry for particular application
      entry = Entry
              .where("app_name = ? 
                      AND hostname IS NOT NULL 
                      AND created_at >= now()-interval '15 seconds'", app.app_name)
              .last
      # preparation
      host      = ""
      platforms = ""
      processes = ""
      p1_p2     = ""
      #begin
        platforms = "# #{sub_entries.size} \n "
        processes = entry.processes.split("Tasks:")[1][1..-1] rescue ""
        p_splitted = processes.split(",")
        #raise p_splitted.inspect
        p1_p2 = p_splitted.join("\n")
        # Ruby interpreter version
        if !entry.ruby_version.blank? && entry.ruby_version != 'n/a' then
          platforms = platforms + "ru: #{entry.ruby_version rescue '?'}"
        end
        # Wildfly version
        if !entry.wildfly_version.blank? && entry.wildfly_version != 'n/a' then
          platforms = platforms + "\nwf: #{entry.wildfly_version rescue '?'}" 
        end
        # OS vesion info
        if !entry.os_version.blank? && entry.os_version != 'n/a' then
          platforms = platforms + "\nos: #{entry.os_version rescue '?'}" 
        end
        # uptime command output info
        if entry.app_name == entry.hostname then 
          uptime_load = "hl: " +  entry.uptime.split("load average")[1][2..-1].gsub(", ", " ").gsub(",", ".") rescue nil
          uptime_info = "hi: " +  entry.uptime.split("load average")[0][0..-4].split("up")[1][1..-1] rescue nil
          host = uptime_load + "\n" + uptime_info + "\n"
        else
          host = ""
        end
      #rescue 
      #end 
    %>
    "<%= app.app_name %>" [label="<%= app.app_name + "\n" + host + "\n" + "#{p1_p2}" + "\n" + platforms %>"];
  <% end %>
<% end %>

<% Flow.all.each do |f| %>
  "<%= f.input %>" -> "<%= f.output %>"
<% end %>

}
</textarea>

<a href="https://github.com/michalasobczak/synopticly">GitHub</a>

<script>
  $(document).ready(function() {
    setInterval(function() {
      /* [vm+pods] Connectivity issue */
      $('tspan').each(function() { 
        r = /# 0/gi; 
        if (this.textContent.toString().match(r)) {
          fill = $($($(this).parent().parent().parent()).children()[0]).attr("style");
          if (fill == "fill:rgb(255,0,0)") {
            $($($(this).parent().parent().parent()).children()[0]).attr("style", "fill:rgb(255,255,255)");
          }
          else {
           $($($(this).parent().parent().parent()).children()[0]).attr("style", "fill:rgb(255,0,0)");
          }
        } 
      });
 
      /* [vm] Users logged in */
      $('tspan').each(function() { 
        r = /(\d) (user)/
        let result = this.textContent.toString().match(r);
        if (result) {
          users_no = result[0];
          if (users_no != "0 user") {
            $($($(this).parent().parent().parent()).children()[0]).attr("style", "fill:rgb(0,255,0)");
          }
        } 
      });

    },1000);

    /* onclick for node rectangular */
    $('.node').click(function() {
      var class_header = $(this).attr('class').split(' ');
      var node_name = class_header[class_header.length - 1]
      alert(node_name)
    })
  });

  /* refresh every N seconds */
  setInterval(function() {
    location.reload();
  }, 10000);
</script>

